//This flow allows the user to enroll a credential backed by codes generated by an OTP app.
//Enrollment takes place by scanning a QR code shown in the browser.
//The flow returns a positive value when the process is carried out successfully. If the
//users decides to enroll a different type of credential, or several failed attempts have
//occurred, the flow terminates with a negative outcome.
//The user in question is identified by input param userData

Flow io.jans.agamapasskey.credsEnrollment.otp
    Basepath "enroller/otp"
    Configs conf
    Inputs userData withEscape

inum = userData.inum
name = userData.name

//Show a page warning the user an OTP app is required in the smartphone
obj = { escape: withEscape }
data = RRF "preQR.ftlh" obj
    
When data.skipped is ""     //user wants a different thing
    Finish false
    
mike = Call io.jans.agamapasskey.enroll.OTPEnroller#new
req = Call mike QRRequest name

key = req.second
timeout = conf.timeout
match = null
reqGenAt = Call java.lang.System#currentTimeMillis

Repeat conf.maxAttempts times max
    
    //Show the OTP validation page
    obj = { request: req.first, timeout: timeout, escape: withEscape, matches: match }
    data = RRF "code.ftlh" obj
    
    When data.skipped is ""     //user wants a different thing
        Finish false

    //Determine if the code enter is valid
    match = Call mike validateCode data.passcode key

    Quit When match is true
    
    //adjust time left
    timeout = Call mike timeLeft reqGenAt timeout

When match is false
    obj = { success: false, error: "Too many failed attempts" }
    Finish obj

nickNamed | E = Call mike save inum name key

When E is not null or nickNamed is false
    Log "@e Unable to save %'s credential" name
    obj = { success: false, error: "Unable to save the credential" }
    Finish obj

Finish true
